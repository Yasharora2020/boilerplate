# Multi-stage build for Python application
# This Dockerfile supports both pip (requirements.txt) and uv (pyproject.toml)
# Rename this file to 'Dockerfile' when using for Python projects

# Build stage
FROM python:3.11-slim as builder

WORKDIR /app

# Install build dependencies and curl for uv installation
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy dependency files
COPY pyproject.toml* requirements.txt* ./

# Install dependencies based on what's available
RUN if [ -f "pyproject.toml" ]; then \
        echo "üì¶ Found pyproject.toml - using uv"; \
        # Install uv
        curl -LsSf https://astral.sh/uv/install.sh | sh; \
        export PATH="/root/.cargo/bin:$PATH"; \
        # Create virtual environment and install with uv
        uv venv /opt/venv; \
        . /opt/venv/bin/activate; \
        uv pip install -r pyproject.toml; \
    elif [ -f "requirements.txt" ]; then \
        echo "üì¶ Found requirements.txt - using pip"; \
        # Create virtual environment and install with pip
        python -m venv /opt/venv; \
        . /opt/venv/bin/activate; \
        pip install --no-cache-dir --upgrade pip; \
        pip install --no-cache-dir -r requirements.txt; \
    else \
        echo "‚ùå No pyproject.toml or requirements.txt found!"; \
        exit 1; \
    fi

# Runtime stage
FROM python:3.11-slim

WORKDIR /app

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    # Add any runtime dependencies here
    # curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Copy application code
COPY . .

# Set environment variables
ENV PATH="/opt/venv/bin:$PATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Create non-root user for security
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app
USER appuser

# Expose port (adjust as needed)
EXPOSE 8000

# Health check (adjust as needed)
# Comment out if you don't have a /health endpoint
# HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
#     CMD python -c "import requests; requests.get('http://localhost:8000/health')" || exit 1

# Run application (adjust command as needed)
# For Flask:
# CMD ["python", "-m", "flask", "run", "--host=0.0.0.0"]
# For FastAPI with uvicorn:
# CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
# For Django:
# CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

CMD ["python", "main.py"]
